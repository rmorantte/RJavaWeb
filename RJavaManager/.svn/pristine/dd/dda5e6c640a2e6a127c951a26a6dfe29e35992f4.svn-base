setwd("D:/PBTools_workspace/PBTools/sample_datasets")
ata1<-read.csv("data1.csv"")
data1<-read.csv("data1.csv")
View(data1)
View(data1)
setwd("D:/PBTools_workspace/PBTools/sample_datasets")
data1<-read.csv("data1.csv")
View(data1)
View(data1)
# --------------------------------------------------------
# ARGUMENTS:
# data - a dataframe
# respvar - a string; variable name of the response variable
# env - a string; variable name of the environment variable
# result - output of single environment analysis
# box - logical; indicates if boxplot(s) is(are) to be created
# hist - logical; indicates if histogram(s) is(are) to be created
# --------------------------------------------------------
#FunctionGraphBoxHistogram <- function(dataName, respvar, env = NULL, result, box = FALSE, hist = FALSE) {
FunctionGraphHistogram <- function(dataName, respvar, hist = FALSE) {
dir.create("plots")
#create R data set given csv file named dataName
data <- read.csv(dataName, header = TRUE, na.strings = c("NA","."), blank.lines.skip = TRUE, sep = ",")
# if (is.null(env)) {
#		withEnv = FALSE
#		data <- cbind(data, ENV="1")
#		names(data) <- make.unique(c(names(data)))
# 		env = names(data)[length(names(data))]
#	} else {
#		withEnv = TRUE
#	}
# if (box == TRUE) {
#   #create boxplot of raw data (1 file for each respvar)
#   #for (i in (1:length(respvar))) {
# 		boxfile = paste(getwd(),"/plots/boxplot_",respvar,".png",sep = "")
# 		png(file = boxfile) #par(mfrow = n2mfrow(length(respvar)));
# 		xlabel = respvar
# 		boxplot(data[,match(respvar, names(data))]~data[,match(env, names(data))],data = data,xlab = xlabel);
# 		dev.off()
# 	#}
# }
if (hist == TRUE) {
#create histogram of the raw data (1 file for each envt in each respvar)
#for (i in (1:length(respvar))) {
#	for (j in (1:nlevels(data[,match(env, names(data))]))) {
#	  siteLabel = result$output[[i]]$site[[j]]$env[[1]]
#    if (withEnv) {histfile = paste(getwd(),"/plots/hist_",respvar[i],"_",siteLabel,".png",sep="")}
#	  else {
histfile = paste(getwd(),"/plots/hist_",respvar[i],".png",sep="")
#	  }
png(file = histfile) # par(mfrow = n2mfrow(length(respvar)*nlevels(data[,match(env, names(data))])));
xlabel = respvar
#		if (withEnv) {hist(result$output[[i]]$site[[j]]$data[,match(respvar[i], names(result$output[[i]]$site[[j]]$data))], xlab = xlabel,main = paste("Site: ", siteLabel))}
#	  else {
hist(data[,match(respvar, names(data))], xlab = xlabel, main = "Histogram")
#	}
dev.off()
}
#}
}
}
# --------------------------------------------------------
# ARGUMENTS:
# data - a dataframe
# respvar - a string; variable name of the response variable
# env - a string; variable name of the environment variable
# result - output of single environment analysis
# box - logical; indicates if boxplot(s) is(are) to be created
# hist - logical; indicates if histogram(s) is(are) to be created
# --------------------------------------------------------
#FunctionGraphBoxHistogram <- function(dataName, respvar, env = NULL, result, box = FALSE, hist = FALSE) {
FunctionGraphHistogram <- function(dataName, respvar, hist = FALSE) {
dir.create("plots")
#create R data set given csv file named dataName
data <- read.csv(dataName, header = TRUE, na.strings = c("NA","."), blank.lines.skip = TRUE, sep = ",")
# if (is.null(env)) {
#		withEnv = FALSE
#		data <- cbind(data, ENV="1")
#		names(data) <- make.unique(c(names(data)))
# 		env = names(data)[length(names(data))]
#	} else {
#		withEnv = TRUE
#	}
# if (box == TRUE) {
#   #create boxplot of raw data (1 file for each respvar)
#   #for (i in (1:length(respvar))) {
# 		boxfile = paste(getwd(),"/plots/boxplot_",respvar,".png",sep = "")
# 		png(file = boxfile) #par(mfrow = n2mfrow(length(respvar)));
# 		xlabel = respvar
# 		boxplot(data[,match(respvar, names(data))]~data[,match(env, names(data))],data = data,xlab = xlabel);
# 		dev.off()
# 	#}
# }
if (hist == TRUE) {
#create histogram of the raw data (1 file for each envt in each respvar)
#for (i in (1:length(respvar))) {
#	for (j in (1:nlevels(data[,match(env, names(data))]))) {
#	  siteLabel = result$output[[i]]$site[[j]]$env[[1]]
#    if (withEnv) {histfile = paste(getwd(),"/plots/hist_",respvar[i],"_",siteLabel,".png",sep="")}
#	  else {
histfile = paste(getwd(),"/plots/hist_",respvar[i],".png",sep="")
#  }
png(file = histfile) # par(mfrow = n2mfrow(length(respvar)*nlevels(data[,match(env, names(data))])));
xlabel = respvar
#		if (withEnv) {hist(result$output[[i]]$site[[j]]$data[,match(respvar[i], names(result$output[[i]]$site[[j]]$data))], xlab = xlabel,main = paste("Site: ", siteLabel))}
#	  else {
hist(data[,match(respvar, names(data))], xlab = xlabel, main = "Histogram")
#	}
dev.off()
#	}
#}
}
}
getwd()
dataName = paste(getwd(),"/data1.csv",sep="")
dataName
respvar = "Y1"
hist = "TRUE"
FunctionGraphHistogram((dataName, respvar, hist)
FunctionGraphHistogram(dataName, respvar, hist)
data <- read.csv(dataName, header = TRUE, na.strings = c("NA","."), blank.lines.skip = TRUE, sep = ",")
View(data)
# --------------------------------------------------------
# ARGUMENTS:
# data - a dataframe
# respvar - a string; variable name of the response variable
# env - a string; variable name of the environment variable
# result - output of single environment analysis
# box - logical; indicates if boxplot(s) is(are) to be created
# hist - logical; indicates if histogram(s) is(are) to be created
# --------------------------------------------------------
#FunctionGraphBoxHistogram <- function(dataName, respvar, env = NULL, result, box = FALSE, hist = FALSE) {
FunctionGraphHistogram <- function(dataName, respvar, hist = FALSE) {
dir.create("plots")
#create R data set given csv file named dataName
data <- read.csv(dataName, header = TRUE, na.strings = c("NA","."), blank.lines.skip = TRUE, sep = ",")
# if (is.null(env)) {
#		withEnv = FALSE
#		data <- cbind(data, ENV="1")
#		names(data) <- make.unique(c(names(data)))
# 		env = names(data)[length(names(data))]
#	} else {
#		withEnv = TRUE
#	}
# if (box == TRUE) {
#   #create boxplot of raw data (1 file for each respvar)
#   #for (i in (1:length(respvar))) {
# 		boxfile = paste(getwd(),"/plots/boxplot_",respvar,".png",sep = "")
# 		png(file = boxfile) #par(mfrow = n2mfrow(length(respvar)));
# 		xlabel = respvar
# 		boxplot(data[,match(respvar, names(data))]~data[,match(env, names(data))],data = data,xlab = xlabel);
# 		dev.off()
# 	#}
# }
if (hist == TRUE) {
#create histogram of the raw data (1 file for each envt in each respvar)
#for (i in (1:length(respvar))) {
#	for (j in (1:nlevels(data[,match(env, names(data))]))) {
#	  siteLabel = result$output[[i]]$site[[j]]$env[[1]]
#    if (withEnv) {histfile = paste(getwd(),"/plots/hist_",respvar[i],"_",siteLabel,".png",sep="")}
#	  else {
histfile = paste(getwd(),"/plots/hist_",respvar,".png",sep="")
#  }
png(file = histfile) # par(mfrow = n2mfrow(length(respvar)*nlevels(data[,match(env, names(data))])));
xlabel = respvar
#		if (withEnv) {hist(result$output[[i]]$site[[j]]$data[,match(respvar[i], names(result$output[[i]]$site[[j]]$data))], xlab = xlabel,main = paste("Site: ", siteLabel))}
#	  else {
hist(data[,match(respvar, names(data))], xlab = xlabel, main = "Histogram")
#	}
dev.off()
#	}
#}
}
}
#test
dataName = paste(getwd(),"/data1.csv",sep="")
dataName
respvar = "Y1"
hist = "TRUE"
FunctionGraphHistogram(dataName, respvar, hist)
setwd("D:\\PBTools_workspace\\Analysis\\sample_datasets")
dataName = paste(getwd(),"/data1.csv",sep="")
dataName
respvar = "Y1"
hist = "TRUE"
FunctionGraphHistogram(dataName, respvar, hist)
# --------------------------------------------------------
# ARGUMENTS:
# data - a dataframe
# respvar - a string; variable name of the response variable
# env - a string; variable name of the environment variable
# result - output of single environment analysis
# box - logical; indicates if boxplot(s) is(are) to be created
# hist - logical; indicates if histogram(s) is(are) to be created
# --------------------------------------------------------
#FunctionGraphBoxHistogram <- function(dataName, respvar, env = NULL, result, box = FALSE, hist = FALSE) {
FunctionGraphHistogram <- function(dataName, respvar, hist = FALSE) {
dir.create("plots")
setwd("D:\\PBTools_workspace\\Analysis\\sample_datasets")
#create R data set given csv file named dataName
data <- read.csv(dataName, header = TRUE, na.strings = c("NA","."), blank.lines.skip = TRUE, sep = ",")
if (hist == TRUE) {
histfile = paste(getwd(),"/plots/hist_",respvar,".png",sep="")
png(file = histfile) # par(mfrow = n2mfrow(length(respvar)*nlevels(data[,match(env, names(data))])));
xlabel = respvar
hist(data[,match(respvar, names(data))], xlab = xlabel, main = "Histogram")
dev.off()
}
}
#test
#setwd("D:\\PBTools_workspace\\Analysis\\sample_datasets")
#dataName = paste(getwd(),"/data1.csv",sep="")
#dataName
#respvar = "Y1"
#hist = "TRUE"
#FunctionGraphHistogram(dataName, respvar, hist)
setwd("D:\\PBTools_workspace\\Analysis\\sample_datasets")
dataName = paste(getwd(),"/data1.csv",sep="")
dataName
respvar = "Y1"
hist = "TRUE"
FunctionGraphHistogram(dataName, respvar, hist)
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.r")
g <- tryCatch(FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE)
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.r")
FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE)
g <- tryCatch(
FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE)
), error=function(err) "notRun")
g <- tryCatch(
FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE)
, error=function(err) "notRun")
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.r")
g <- tryCatch(FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE), error=function(err) "notRun")
g
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.r")
g <- tryCatch(FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE), error=function(err) "notRun")
g
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.r")
g <- tryCatch(FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE), error=function(err) "notRun")
g
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.r")
g <- tryCatch(FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE), error=function(err) "notRun")
q
g
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.r")
g <- tryCatch(FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE), error=function(err) "notRun")
g
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.r")
g <- tryCatch(FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE), error=function(err) "notRun")
g
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.R")
g <- tryCatch(FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE), error=function(err) "notRun")
g
g
dev.off()
g
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.R")
g <- tryCatch(FunctionGraphHistogram(dataName = "D:/PBTools_workspace/Analysis/sample_datasets/data1.csv", respvar = "Y1", hist = TRUE), error=function(err) "notRun")
# --------------------------------------------------------
# ARGUMENTS:
# data - a dataframe
# respvar - a string; variable name of the response variable
# env - a string; variable name of the environment variable
# result - output of single environment analysis
# box - logical; indicates if boxplot(s) is(are) to be created
# hist - logical; indicates if histogram(s) is(are) to be created
# --------------------------------------------------------
#FunctionGraphBoxHistogram <- function(dataName, respvar, env = NULL, result, box = FALSE, hist = FALSE) {
#FunctionGraphHistogram <- function(dataName, respvar, hist = FALSE) {
FunctionGraphHistogram <- function(dataName, respvar) {
dir.create("plots")
setwd("D:\\PBTools_workspace\\Analysis\\sample_datasets")
#create R data set given csv file named dataName
data <- read.csv(dataName, header = TRUE, na.strings = c("NA","."), blank.lines.skip = TRUE, sep = ",")
#if (hist == TRUE) {
histfile = paste(getwd(),"/plots/hist_",respvar,".png",sep="")
png(file = histfile) # par(mfrow = n2mfrow(length(respvar)*nlevels(data[,match(env, names(data))])));
xlabel = respvar
hist(data[,match(respvar, names(data))], xlab = xlabel, main = "Histogram")
dev.off()
# }
}
#test
#setwd("D:\\PBTools_workspace\\Analysis\\sample_datasets")
#dataName = paste(getwd(),"/data1.csv",sep="")
#dataName
#respvar = "Y1"
#hist = "TRUE"
#FunctionGraphHistogram(dataName, respvar, hist)
source("D:/PBTools_workspace/Analysis/rscript/FunctionGraphHistogram.R")
h <- tryCatch(FunctionGraphHistogram("data1.csv","Y1"), error = function(err) "notRun")
dataName = "data1.csv"
respvar = "Y1"
setwd("D:\\PBTools_workspace\\Analysis\\sample_datasets")
dir.create("plots")
data <- read.csv(dataName, header = TRUE, na.strings = c("NA","."), blank.lines.skip = TRUE, sep = ",")
histfile = paste(getwd(),"/plots/hist_",respvar,".png",sep="")
png(file = histfile) # par(mfrow = n2mfrow(length(respvar)*nlevels(data[,match(env, names(data))])));
xlabel = respvar
hist(data[,match(respvar, names(data))], xlab = xlabel, main = "Histogram")
dev.off()
setwd("D:/PBTools_workspace/Analysis/sample_datasets")
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/data1.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
View(dataRead)
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/data1.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
View(dataRead)
subsetted <- tryCatch(subset(dataRead, c(("Gen"==7|"Gen"==8)&("Site"!="Env1")&("Blk"!=4))), error=function(err) "notRun")
subsetted <- tryCatch(subset(dataRead, c(("Gen"==7|"Gen"==8)), error=function(err) "notRun")
subsetted <- tryCatch(subset(dataRead, c(("Gen"==7|"Gen"==8)), error=function(err) "notRun"))
subsetted <- tryCatch(subset(dataRead, c("Site"!="Env1")), error=function(err) "notRun")
subsetted <- tryCatch(subset(dataRead, c("Site"=="Env1")), error=function(err) "notRun")
View(dataRead)
subsetted <- tryCatch(subset(dataRead, c("Site"="Env1")), error=function(err) "notRun")
subsetted <- tryCatch(subset(dataRead, c("Site"=="Env1")), error=function(err) "notRun")
View(subsetted)
View(subsetted)
subsetted <- tryCatch(subset(dataRead, c(Gen==7)), error=function(err) "notRun")
View(subsetted)
subsetted <- tryCatch(subset(dataRead, c((Gen==7|Gen==8)&(Site!="Env1")&(Blk!=4))), error=function(err) "notRun")
View(subsetted)
library(testPackage)
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/data1Sort.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
sorted <- SortCases(data = dataRead, var = c("Site","Gen","Blk"), sortBy = c("ascending","ascending","descending"))
dataSaved <- write.csv(sorted, quote = FALSE, file = "D:/PBTools_workspace/RJavaManager/sample_datasets/data1Sort3.csv", row.names = FALSE)
library(testPackage)
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/data1Sort.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
sorted <- SortCases(data = dataRead, var = c("Site","Gen","Blk"), sortBy = c("ascending","ascending","descending"))
sorted
dataSaved <- write.csv(sorted, quote = FALSE, file = "D:/PBTools_workspace/RJavaManager/sample_datasets/data1Sort3.csv", row.names = FALSE)
library(testPackage)
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/data1Sort.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
sorted <- SortCases(data = dataRead, var = c("Site","Gen","Blk"), sortBy = c("ascending","ascending","descending"))
dataSaved <- write.csv(sorted, quote = FALSE, file = "D:/PBTools_workspace/RJavaManager/sample_datasets/data1Sort3.csv", row.names = FALSE)
library(testPackage)
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/data1Sort.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
sorted <- SortCases(data = dataRead, var = c("Site","Gen","Blk"), sortBy = c("ascending","ascending","descending"))
View(sorted)
View(sorted)
View(dataRead)
View(sorted)
dataSaved <- write.csv(sorted, quote = FALSE, file = "D:/PBTools_workspace/RJavaManager/sample_datasets/data1Sort3.csv", row.names = FALSE)
library("testPackage")
source("D:/PBTools_workspace/RJavaManager/rscript/class_information2.r")
source("D:/PBTools_workspace/RJavaManager/rscript/trim_strings.R")
source("D:/PBTools_workspace/RJavaManager/rscript/class_information2.r")
source("D:/PBTools_workspace/RJavaManager/rscript/trim_strings.R")
source("D:/PBTools_workspace/RJavaManager/rscript/estimateMissingData.R")
source("D:/PBTools_workspace/RJavaManager/rscript/facGen.r")
source("D:/PBTools_workspace/RJavaManager/rscript/GenerateBalanceData.R")
source("D:/PBTools_workspace/RJavaManager/rscript/nc1Test.R")
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/NCI_ME.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
sink("D:/PBTools_workspace/RJavaManager/sample_datasets/output.txt")
result<-nc1Test("RCBD", dataRead, c("Y"), "Female", "Male", rep = NULL, block = "Block", inbred = TRUE, individual = NULL, environment = "Env")
sink()
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/NCI_ME.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
View(dataRead)
fix(nc1Test)
data = dataRead
options(show.signif.stars=FALSE)
data <- eval(parse(text = data))
data = "D:/PBTools_workspace/RJavaManager/sample_datasets/NCI_ME.csv"
data <- eval(parse(text = data))
data = "D://PBTools_workspace//RJavaManager//sample_datasets//NCI_ME.csv"
data <- eval(parse(text = data))
data = "D:\PBTools_workspace\RJavaManager\sample_datasets\NCI_ME.csv"
data = "D:\\PBTools_workspace\\RJavaManager\\sample_datasets\\NCI_ME.csv"
data <- eval(parse(text = data))
result<-nc1Test("RCBD", "dataRead", c("Y"), "Female", "Male", rep = NULL, block = "Block", inbred = TRUE, individual = NULL, environment = "Env")
source("D:/PBTools_workspace/RJavaManager/rscript/class_information2.r")
source("D:/PBTools_workspace/RJavaManager/rscript/trim_strings.R")
source("D:/PBTools_workspace/RJavaManager/rscript/estimateMissingData.R")
source("D:/PBTools_workspace/RJavaManager/rscript/facGen.r")
source("D:/PBTools_workspace/RJavaManager/rscript/GenerateBalanceData.R")
source("D:/PBTools_workspace/RJavaManager/rscript/nc1Test.R")
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/NCI_ME.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
data = dataRead
sink("D:/PBTools_workspace/RJavaManager/sample_datasets/output.txt")
result<-nc1Test("RCBD", "dataRead", c("Y"), "Female", "Male", rep = NULL, block = "Block", inbred = TRUE, individual = NULL, environment = "Env")
sink()
source("D:/PBTools_workspace/RJavaManager/rscript/class_information2.r")
source("D:/PBTools_workspace/RJavaManager/rscript/trim_strings.R")
source("D:/PBTools_workspace/RJavaManager/rscript/estimateMissingData.R")
source("D:/PBTools_workspace/RJavaManager/rscript/facGen.r")
source("D:/PBTools_workspace/RJavaManager/rscript/GenerateBalanceData.R")
source("D:/PBTools_workspace/RJavaManager/rscript/nc1Test.R")
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/NCI_ME.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
sink("D:/PBTools_workspace/RJavaManager/sample_datasets/output.txt")
result<-nc1Test("RCBD", "dataRead", c("Y"), "Female", "Male", rep = NULL, block = "Block", inbred = TRUE, individual = NULL, environment = "Env")
sink()
source("D:/PBTools_workspace/RJavaManager/rscript/class_information2.r")
source("D:/PBTools_workspace/RJavaManager/rscript/trim_strings.R")
source("D:/PBTools_workspace/RJavaManager/rscript/estimateMissingData.R")
source("D:/PBTools_workspace/RJavaManager/rscript/facGen.r")
source("D:/PBTools_workspace/RJavaManager/rscript/GenerateBalanceData.R")
source("D:/PBTools_workspace/RJavaManager/rscript/nc1Test.R")
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/NCI_ME.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
sink("D:/PBTools_workspace/RJavaManager/sample_datasets/output.txt")
result<-nc1Test("RCB", "dataRead", c("Y"), "Female", "Male", rep = NULL, block = "Block", inbred = TRUE, individual = NULL, environment = "Env")
sink()
source("D:/PBTools_workspace/RJavaManager/rscript/class_information2.r")
source("D:/PBTools_workspace/RJavaManager/rscript/trim_strings.R")
source("D:/PBTools_workspace/RJavaManager/rscript/estimateMissingData.R")
source("D:/PBTools_workspace/RJavaManager/rscript/facGen.r")
source("D:/PBTools_workspace/RJavaManager/rscript/GenerateBalanceData.R")
source("D:/PBTools_workspace/RJavaManager/rscript/nc1Test.R")
dataRead <- read.csv("D:/PBTools_workspace/RJavaManager/sample_datasets/NCI_ME.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
sink("D:/PBTools_workspace/RJavaManager/sample_datasets/output.txt")
result<-nc1Test("RCB", "dataRead", c("Y"), "Female", "Male", rep = NULL, block = "Block", inbred = TRUE, individual = NULL, environment = "Env")
sink()
