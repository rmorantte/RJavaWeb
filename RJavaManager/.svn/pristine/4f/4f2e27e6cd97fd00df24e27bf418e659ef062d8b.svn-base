######
# LinearRegressionSelection - function for performing Linear Regression Analysis with a selection method
######

LinearRegressionSelection <- function(data, depVar, indepVar, constant = TRUE, correlate = FALSE, 
                                     selection = "none", selectionStat = NULL,
                                     confInt = FALSE, confLevel = 0.95, 
                                     covMatrix = FALSE, normality = NULL, 
                                     heteroskedasticity = NULL, autoCorr = FALSE, 
                                     VIF = FALSE, COOKS = FALSE, leverage = FALSE) {
  
  if (is.character(data)) {
    nameData <- data
    data <- eval(parse(text = data))
  } else { nameData <- paste(deparse(substitute(data))) } #reads data: if (is.character(data)) { data <- eval(parse(text = data)) }
  
  #descriptive statistics
  DescriptiveStatistics(data = data, var = c(depVar,indepVar), statistics = c("nnmiss", "mean", "sd", "se.mean")) 
  cat("\n")

  #correlation
  if (correlate) {
    cat("\n")
    BivariateCorrelationTest(data = data, var = c(depVar, indepVar), method = "pearson", alternative = "two.sided", statistics = FALSE)
  }
  
  regOut = NULL
  outData = NULL
  outFit = NULL
  
  #selection
  if (selection == "none") {
    #perform regression
    regOut = LinearRegressionAnalysis(data, depVar, indepVar, constant, statistics = FALSE, confInt, confLevel, covMatrix,
                             normality, heteroskedasticity, autoCorr, VIF, COOKS, leverage)
    
  } else if (selection == "allposs") {
    allPossibleReg(data, depVar, indepVar, selectionStat, constant)
  
  } else {
    selMethod <- switch(selection, 
           forward = "Forward selection",
           backward = "Backward elimination",
           stepwise = "Stepwise regression")
    
    
    cat("SELECTION METHOD: ", selMethod, "\n\n", sep = "")
      if (selection == "stepwise") selection = "both"
    
    for (i in 1:length(depVar)) {
      cat("DEPENDENT VARIABLE: ", depVar[i], "\n\n", sep = "")
      
      if (constant) {regCom <- paste("lm(", depVar[i], " ~ ", paste(indepVar, collapse = "+"),", data = data)", sep = "")
      } else { regCom <- paste("lm(", depVar[i], " ~ ", paste(indepVar, collapse = "+"),"- 1, data = data)", sep = "")}
      res <- eval(parse(text = regCom))
      fwdReg <- step(res, direction = selection, trace = 1)
        
      if (constant) { selIndepVar <- names(fwdReg$coefficients)[-1]
      } else selIndepVar <- names(fwdReg$coefficients)
      
      cat("\n")
      #perform regression
      regOut = LinearRegressionAnalysis(data, depVar[i], selIndepVar, constant, statistics = FALSE, confInt, confLevel, covMatrix,
                                 normality, heteroskedasticity, autoCorr, VIF, COOKS, leverage)
      if (i == 1) { outData = regOut$data
      } else {
        outVarNames = NULL
        outVarNames[[1]] = paste("regOut$data$", depVar[i], "_pred",sep = "")
        outVarNames[[2]] = paste("regOut$data$", depVar[i], "_resid", sep = "")
        outVars = data.frame(cbind(eval(parse(text = outVarNames[[1]])), eval(parse(text = outVarNames[[2]]))))
        colnames(outVars) = c(paste(depVar[i], "_pred",sep = ""), paste(depVar[i], "_resid",sep = ""))
        outData = cbind(outData, outVars)
      }
      outFit[i] = regOut$modelFit
      
    }      
      
  }
        

  if (selection == "allposs") {
    return(list(data = data))
  } else if (selection == "none") {
    return(list(data = regOut$data, modelFit = regOut$modelFit))
  } else {
#     outData = NULL
#     outFit = NULL
#     for (i in 1:length(depVar)) {
#       outData[[i]] = regOut[[i]]$data
#       outFit[[i]] = regOut[[i]]$modelFit
#     }
    return(list(data=outData, modelFit = outFit))
  }

}
  
