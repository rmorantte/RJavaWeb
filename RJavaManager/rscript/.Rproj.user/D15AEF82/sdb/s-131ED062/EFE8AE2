{
    "contents" : "###########\n#  GSDataImputation\n#' Function for imputing data\n#\n#  Parameters:\n#' @param outputPath path where output will be saved\n#' @param geno_file name of genotypic file\n#' @param impType type of imputation to use, whether random or family\n#' @param pheno_file name of phenotypic file\n#' @param familyTrait name of variable to describe family structure, if impType is family\n#' @param packageFormat package format used in saving genotype file, whether \"synbreed\", \"rrBLUP\" or \"BGLR\"\n  \n#  Output\n#   genoData - R data containing genotype information\n###########\n\nGSDataImputation <- function(outputPath, geno_file, impType = c(\"random\", \"family\"), pheno_file = NULL, familyTrait = NULL, packageFormat = c(\"synbreed\", \"rrBLUP\", \"BGLR\")) {\n    \n  genoData <- read.table(geno_file, header = TRUE, na.strings = c(\"NA\",\".\"), row.names = 1, blank.lines.skip=TRUE, stringsAsFactors=FALSE, sep = \",\")    \n\n  phenoData = NULL\n  if (impType == \"family\") {\n    phenoData <- read.table(pheno_file, header = TRUE, na.strings = c(\"NA\",\".\"), row.names = 1, blank.lines.skip=TRUE, stringsAsFactors=FALSE, sep = \",\")    \n  }\n  \n  genoGp <- create.gpData(geno = genoData, family = phenoData[, familyTrait])\n\n  rm(list=c(\"genoData\", \"phenoData\"))\n  gc()\n#Z#   capture.output(syn_code<-codeGeno(mygp,impute=TRUE,impute.type=\"random\",nmiss=nmiss,maf=maf,verbose=TRUE),file=paste0(file_prefix,\"-QCSummary-\",nmiss,\"-\",maf,\".txt\"))\n# capture.output(syn_code<-codeGeno(mygp,label.heter=\"1\",impute=TRUE,impute.type=\"random\",verbose=TRUE),file=paste0(file_prefix,\"_impute.txt\"))\n\n  capture.output(syn_code<-codeGeno(genoGp,label.heter = \"1\", impute = TRUE,impute.type = impType, nmiss = NULL, maf = NULL,verbose=TRUE),file=paste0(outputPath,\"QCSummary_impute.txt\"))\n\n  #save using synbreed format\n  if (packageFormat == \"synbreed\") {\n  #     syn_code=discard.markers(syn_code, snps[dis])  # remove high-correlated markers #Z# regardless of package format?\n      syn_code$geno[syn_code$geno==1]=0        # set heterozygotes to AA\n      \n      #add: redo codeGeno with maf? -- specify maf value\n      #syn_code<-codeGeno(syn_code,label.heter=\"1\",maf=maf)\n      ###compare output files\n      \n      #Z#   write.csv(syn_code$geno,paste0(file_prefix,\"-synbreed-\",nmiss,\"-\",maf,\"-\",cor_threshold,\".csv\"))  \n      outputName <- paste0(outputPath,\"synbreed.csv\")\n      write.csv(syn_code$geno, outputName)  \n    } else if (packageFormat == \"rrBLUP\") {\n      # recode into rrBLUP package\n      rrBLUP_code=syn_code$geno\n      rrBLUP_code[which(syn_code$geno==0,arr.ind=T)]=1\n      rrBLUP_code[which(syn_code$genod==1,arr.ind=T)]=0\n      rrBLUP_code[which(syn_code$geno==2,arr.ind=T)]=-1\n      #Z#   write.csv(rrBLUP_code,paste0(file_prefix,\"-rrBLUP-\",nmiss,\"-\",maf,\"-\",cor_threshold,\".csv\"))\n      outputName <- paste0(outputPath,\"rrBLUP.csv\")\n      write.csv(rrBLUP_code, outputName)  \n    } else if (packageFormat == \"BGLR\") {\n      # recode into BGLR package\n      BGLR_code=syn_code$geno\n      BGLR_code[which(syn_code$geno==2,arr.ind=T)]=3\n      BGLR_code[which(is.na(syn_code$geno))]=2\n      #Z#   write.csv(BGLR_code,paste0(file_prefix,\"-BGLR-\",nmiss,\"-\",maf,\"-\",cor_threshold,\".csv\"))\n      outputName <- paste0(outputPath,\"BGLR.csv\") \n      write.csv(BGLR_code, outputName)\n    }\n  \n  #Z# return(list(synbreed=paste0(file_prefix,\"-synbreed-\",nmiss,\"-\",maf,\"-\",cor_threshold,\".csv\"),BGLR=paste0(file_prefix,\"-BGLR-\",nmiss,\"-\",maf,\"-\",cor_threshold,\".csv\"),rrBLUP=paste0(file_prefix,\"-rrBLUP-\",nmiss,\"-\",maf,\"-\",cor_threshold,\".csv\")))\n  #Z# return(list(synbreed=paste0(outputPath,\"synbreed.csv\"),BGLR=paste0(outputPath,\"BGLR.csv\"),rrBLUP=paste0(outputPath,\"rrBLUP.csv\")))\n  return(geno_data = syn_code$geno)\n}",
    "created" : 1428393574321.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3283886591",
    "id" : "EFE8AE2",
    "lastKnownWriteTime" : 1428393673,
    "path" : "E:/App Files/workspace_GitHub/RJavaWeb/RJavaManager/rscript/GSDataImputation.R",
    "project_path" : "GSDataImputation.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}